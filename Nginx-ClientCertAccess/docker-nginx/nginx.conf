user nobody nogroup;
worker_processes auto;          # auto-detect number of logical CPU cores

events {
  worker_connections 512;       # set the max number of simultaneous connections (per worker process)
}

http {
  upstream app {
    server app:4567;            # app is automatically defined inside /etc/hosts by Docker
  }

  server {
    listen *:443;               # Listen for incoming connections from any interface on port 443 (TLS)
    ssl on;
    server_name "";             # Don't worry if "Host" HTTP Header is empty or not set

    ssl_certificate        /etc/nginx/certs/server.crt;
    ssl_certificate_key    /etc/nginx/certs/server.key;
    ssl_client_certificate /etc/nginx/certs/ca.crt; # the cert used to sign the client certificates
    ssl_verify_client      on; # force SSL verification (can also be set to 'optional')
    #ssl_crl                /etc/nginx/certs/crl.pem;

    root /usr/share/nginx/html; # serve static files from here

    location /app/ {            # catch any requests that start with /app/
      proxy_pass http://app/;   # proxy requests onto our app server (i.e. a different container)
      proxy_set_header X-ClientCert-DN $ssl_client_s_dn; # Thin server Request gets this as `HTTP_X_CLIENTCERT_DN`
                                #
                                # NOTE: If you don't put a forward slash / at the end of the upstream name
                                #       then you'll find nginx passes the request as /app/ rather than just /
                                #       Putting / after the upstream name means it acts more like the alias directive
                                #       If I kept it as http://app; then I would've needed to add a /app/ route to Sinatra
    }
  }
}
